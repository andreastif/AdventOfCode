//Lärdomar:
        //  får listan att summera till EN total
        //                myList.stream()
        //                .filter(e -> !e.isBlank())
        //                .map(e -> Long.parseLong(e))
        //                .reduce(0L, (a, b) -> a + b);

        //  sparar en lista som BARA innehåller talen (rensat ut blank)
        //                 myList.stream()
        //                .filter(e -> !e.isBlank())
        //                .map(e -> Long.parseLong(e))
        //                .toList()

        //  .map betyder för varje element, utför funktionen som anges.
        //                         List<Integer> anotherList = strings.stream()
        //                        .map(e -> Arrays.stream(e.split("^0$"))
        //                        .filter(s -> !s.isEmpty())
        //                        .mapToInt(Integer::parseInt)
        //                        .sum()).toList();

        // anropa egengjorda funktioner för varje element genom följande
        //              .map(e -> { Function<Type IN, Type FROM> funcName = ex ->
        //                          {
        //                            Codeblock to execute for ex
        //                              return val;
        //                                  }
        //                              }).reduce(0, (a,b) -> a + b);

        //  Du kan anropa och avbryta flera nestlade loopar genom att skriva följande
        //      loops:
        //          for-each loop 1 {
        //              for-each loop 2 {
        //                  for-each loop 3 {
        //                      break loops; //avbryter alla tre loopar (1-3) istället för endast den innersta (3)
        //                      }
        //                  }
        //              }